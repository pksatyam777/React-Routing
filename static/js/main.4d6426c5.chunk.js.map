{"version":3,"sources":["Components/Mounting.jsx","Components/Updating.jsx","Components/Unmounting.jsx","App.js","index.js"],"names":["Mounting","Updating","Unmounting","App","className","to","exact","path","component","ReactDOM","render","document","getElementById"],"mappings":"sPA2CeA,MA1Cf,WACE,OACE,6BACE,wCACA,mGAEE,6BAFF,uEAIE,6BAJF,0EAME,6BANF,2EAQE,6BARF,uDAUE,6BAVF,qEAYE,6BAZF,2EAcE,6BAdF,0EAgBE,6BAhBF,yEAkBE,6BAlBF,yEAoBE,6BApBF,+EAsBE,6BAtBF,sEAwBE,6BAxBF,qEA0BE,6BA1BF,mEA4BE,6BA5BF,sEA8BE,6BA9BF,2EAgCE,6BAhCF,eCJS,SAASC,IACtB,OACE,6BACE,wCACA,+FACmE,6BADnE,2EAGE,6BAHF,wEAKE,6BALF,wEAOE,6BAPF,0EASE,6BATF,mEAWE,6BAXF,0EAaE,6BAbF,wDAeE,+BCnBO,SAASC,IACtB,OACE,6BACE,0CACA,qGAEE,6BAFF,2EAIE,6BAJF,wEAME,6BANF,wEAQE,6BARF,2EAUE,6BAVF,0EAYE,6BAZF,2EAcE,6BAdF,sEAgBE,6BAhBF,2EAkBE,6BAlBF,sEAoBE,6BApBF,+EAsBE,6BAtBF,2EAwBE,6BAxBF,+B,MCGS,SAASC,IACtB,OACE,6BACE,6BACE,qDAEF,6BACE,4BACE,4BACE,kBAAC,IAAD,CAAMC,UAAU,IAAIC,GAAG,aAAvB,YAGA,kBAAC,IAAD,CAAMD,UAAU,IAAIC,GAAG,aAAvB,YAIA,kBAAC,IAAD,CAAMD,UAAU,IAAIC,GAAG,eAAvB,iBAON,6BACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,YAAYC,UAAWR,IACzC,kBAAC,IAAD,CAAOM,OAAK,EAACC,KAAK,YAAYC,UAAWP,IACzC,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,cAAcC,UAAWN,MC9BnDO,IAASC,OACP,kBAAC,IAAD,KACE,kBAACP,EAAD,OAEFQ,SAASC,eAAe,W","file":"static/js/main.4d6426c5.chunk.js","sourcesContent":["import React from \"react\";\nfunction Mounting() {\n  return (\n    <div>\n      <h2>Mounting</h2>\n      <p>\n        Mounting The name is self-explanatory. Mounting is the phase in which\n        <br />\n        our React component mounts on the DOM (i.e., is created and inserted\n        <br />\n        into the DOM). This phase comes onto the scene after the initialization\n        <br />\n        phase is completed. In this phase, our component renders the first time.\n        <br />\n        The methods that are available in this phase are: 1.\n        <br />\n        componentWillMount() This method is called just before a component\n        <br />\n        mounts on the DOM or the render method is called. After this method, the\n        <br />\n        component gets mounted. Note: You should not make API calls or any data\n        <br />\n        changes using this.setstate in this method because it is called before\n        <br />\n        the render method. So, nothing can be done with the DOM (i.e. updating\n        <br />\n        the data with API response) as it has not been mounted. Hence, we can’t\n        <br />\n        update the state with the API response. 2. componentDidMount() This\n        <br />\n        method is called after the component gets mounted on the DOM. Like\n        <br />\n        componentWillMount, it is called once in a lifecycle. Before the\n        <br />\n        execution of this method, the render method is called (i.e., we can\n        <br />\n        access the DOM). We can make API calls and update the state with the API\n        <br />\n        response.\n      </p>\n    </div>\n  );\n}\nexport default Mounting;\n","import React from \"react\";\nexport default function Updating() {\n  return (\n    <div>\n      <h2>Updating</h2>\n      <p>\n        1 componentDidUpdate is invoked when the render function within a<br />\n        component is called. This can happen when state or props changes. It can\n        <br />\n        also happen when forceUpdate is called. Sometimes, a component update\n        <br />\n        may not trigger a DOM update. This is because React creates a virtual\n        <br />\n        DOM after the update and checks with the virtual DOM before update. And\n        <br />\n        only if there is a difference, the DOM is updated. In your case,\n        <br />\n        probably, though the render function was triggered, there was no change\n        <br />\n        in the virtual DOM and hence there was no DOM update.\n        <br />\n      </p>\n    </div>\n  );\n}\n","import React from \"react\";\nexport default function Unmounting() {\n  return (\n    <div>\n      <h2>Unmounting</h2>\n      <p>\n        A React component's lifecycle contains distinct phases for creation and\n        <br />\n        deletion. In coding terms, these are called mounting and unmounting. You\n        <br />\n        can also think of them as \"setup\" and \"cleanup\". If you were going to\n        <br />\n        have a picnic, just before you lay down the picnic blanket you'd make\n        <br />\n        sure the ground was level and clean. Also, after you're done, and before\n        <br />\n        you clean up your picnic blanket, you'd make sure you've taken all your\n        <br />\n        belongings off it and cleared up any garbage left on the grass so people\n        <br />\n        after you can easily use the same spot. That's very similar to what\n        <br />\n        happens with React components. The browser window is almost like a great\n        <br />\n        big field that loads the components that can be used. And when they\n        <br />\n        leave, it's only polite of them to clean up the space they were using —\n        <br />\n        so that other components can reuse the same space without any annoyances\n        <br />\n        due to things left behind.\n      </p>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport Mounting from \"./Components/Mounting.jsx\";\nimport Updating from \"./Components/Updating.jsx\";\n\nimport Unmounting from \"./Components/Unmounting.jsx\";\nimport \"./styles.css\";\n\nexport default function App() {\n  return (\n    <div>\n      <div>\n        <h1>Component Life Cycle</h1>\n      </div>\n      <nav>\n        <ul>\n          <li>\n            <Link className=\"a\" to=\"/Mounting\">\n              Mounting\n            </Link>\n            <Link className=\"b\" to=\"/updating\">\n              Updating\n            </Link>\n\n            <Link className=\"d\" to=\"/Unmounting\">\n              Unmounting\n            </Link>\n          </li>\n        </ul>\n      </nav>\n\n      <hr />\n      <Switch>\n        <Route exact path=\"/Mounting\" component={Mounting} />\n        <Route exact path=\"/updating\" component={Updating} />\n        <Route exact path=\"/Unmounting\" component={Unmounting} />\n      </Switch>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}